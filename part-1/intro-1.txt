ESEUR Workshop - Introduction
=============================
:author:    Derek M. Jones
:copyright: Somebody
:backend:   slidy
:max-width: 45em

Overview
--------

{nbsp}

Me talking

* https://github.com/Derek-Jones/ESEUR-workshop

You doing

* data-to-try/

--------
10:00-10:45 Introduction, R, data visualization
10:45-11:15 Doing
11:15-12:00 Probability & Statistics
12:00-13:30 Doing+lunch
13:30-14:30 Regression modelling
14:30-15:30 Doing
15:30-16:15 Regression modelling (multiple)
16:15-17:00 Doing
--------

Aims
----

{nbsp}

Useful to software developers

* analyse your own data
* understand somebody else's analysis
* better understanding of development processes

{nbsp}

Developers are part-time data analyzers

* minimise what developers need to know
* basic techniques + pointers to the details

Approach
--------

A doctor's approach to curing patient problems

* what are the symptoms - assumes that data can be obtained

** requires some domain knowledge
** visual approach

* form hypothesis - try this and see how you get on

{nbsp}

A few general techniques covering common cases

* need a computer
* use R for convenience, Python for production

{nbsp}

Minimum of mathematics

Always remember
---------------

{nbsp}

<quote>Output of statistical analysis should be treated as a guide and not a mandate</quote>

{nbsp}

<quote>All models are wrong, but some are useful</quote>

Why R?
------

{nbsp}

Interactive system + support by common IDEs

* mostly stats + some programming -> R
* mostly programming + some stats -> Python
** <code>statsmodels</code> Python package mimicking some R functionality

{nbsp}

Thriving ecosystem

* lots of books
* wide range of packages - CRAN https://cran.r-project.org
* active discussion groups:

** Cross Validated: https://stats.stackexchange.com/
** mailing list: https://www.r-project.org/mail.html
** newsgroup: comp.lang.r.general

Brief introduction to R
-----------------------

{nbsp}

Small language, large library

Programs tend to be short

* no support for programming in the large

Operates on vectors

Fortran parentage with strong functional flavor

A few object-oriented features

* function overloading

Derived from S in 1990s, which came out of Bell Labs in 1970s

R Implementations
-----------------

{nbsp}

R - The R-project https://www.r-project.org

* interactive command line/batch mode
* interpreted + byte code compiler
* <rcode>?</rcode> help, <rcode>??</rcode> search

{nbsp}

Go faster efforts focused on packages

* low level maths in C and Fortran
* custom written parallel-processing functions
* reseachers working on native code compilers

Language differences
--------------------

Fortran parentage

* arrays start at 1, not 0
* row-column order (not column-row) <rcode>df[row, column]</rcode>
* operator precedence: <rcode>!x == y</rcode>

Identifiers

* Case is significant, <rcode>A_var != a_var</rcode>
* <rcode>names.can.contain...</rcode>

Semantic view of code, not a machine representation view

<rcode><<-</rcode> operator to assign to global variables

The Language
------------

{nbsp}

No statements, only expressions

[source,R]
-----
x = if (y < 1) 1 else 2
-----

<rcode>return()</rcode>, <rcode>switch()</rcode>, <rcode>q()</rcode> are function calls

<rcode>for (i in 1:10)</rcode>

{nbsp}

Variables are implicitly defined when assigned to

[source,R]
-----
x=1 ; y="abc"

x=function(p1, p2=2) { return(p1+p2) }
-----

Types
-----

{nbsp}

boolean, character, integer (32-bit), reals (64-bit), raw

array, data.table, list, function, formula, expression

<rcode>as.character</rcode>, <rcode>as.numeric</rcode>, <rcode>as.integer</rcode>, <rcode>as.array</rcode>, <rcode>as.Date</rcode>, ...

{nbsp}

Driven by semantics, not underlying representation

* <rcode>typeof</rcode>, <rcode>mode</rcode>
* <rcode>as.integer("1"); as.integer("a")</rcode>

{nbsp}

<rcode>NA</rcode>, <rcode>NULL</rcode>

Expressions
-----------

{nbsp}

All literals are vectors of length one, no scalars

* <rcode>3</rcode> equivalent to <rcode>c(3)</rcode>
* <rcode>1:5</rcode>  equivalent to <rcode>c(1, 2, 3, 4, 5)</rcode>
* <rcode>seq(3, 20, by=4)</rcode>

{nbsp}

Left to right order of evaluation

{nbsp}

<rcode>\$</rcode> member selection, <rcode>^</rcode> exponentiation, <rcode>:</rcode> sequence

Vector creation and access
--------------------------

[source,R]
-----
x = 2                   # vector containing one value
x = c(2, 4, 6, 8, 10)   # vector containing five values
# new vector containing the contents of x and two values
x = c(x, 12, 14)
y = vector(length=5)    # vector created by function call
y = 3:8                 # same as c(3, 4, 5, 6, 7, 8)
# All elements must have the same type
z = c(1, 2, "3")        # String has greatest conversion precedence
-----

[source,R]
----
> x = 10:19
> x[2]
[1] 11
> x[3:4]
[1] 12 13
> x[-1]                        # exclude element 1
[1] 11 12 13 14 15 16 17 18 19
> x[12]                        # there is no 12'th element
[1] NA
> x[12]=100                    # there is now
> x
 [1]  10  11  12  13  14  15  16  17  18  19  NA 100
----

Operators work on vectors
-------------------------

[source,R]
----
> c(5, 6) + 1
[1] 6 7
> c(1, 2) + c(3, 4)
[1] 4 6
> c(7, 8, 9, 10) + c(11, 12) # vector recycled
[1] 18 20 20 22
> c(7, 8, 9, 10) + c(11, 12, 13)
[1] 18 20 22 21
> c(0, 1) < c(1, 0)
[1]  TRUE FALSE
----

data.frame operations
---------------------

[source,R]
----
> x = data.frame(num=c(1, 2, 3, 4), name=c("a", "b", "c", "d"))
> x
  num name
1   1    a
2   2    b
3   3    c
4   4    d
> # Extracting subsets of dataframes
> subset(x, num > 2)
  num name
3   3    c
4   4    d
> 
> # x[x\$num > 2, ]
> # Have to remember that rows are indexed first and specify x twice
----

[source,R]
-----
x = data.frame(num=c(1, 2, 3, 4), name=c("a", "b", "c", "d"))
x\$val=runif(nrow(x))
-----

I/O
---

{nbsp}

File contents at a time input/output

{nbsp}

Lots of graphics systems/packages

{nbsp}

<rcode>cat</rcode>, simpler and more flexible than <rcode>print</rcode>

read.csv
--------

{nbsp}

[source,R]
-----
data=read.csv("measurements.csv", as.is=TRUE)

data=read.csv("measurements.csv.xz")

data=read.csv("measurements.csv", sep="|")

data=read.csv("measurements.csv", header=FALSE, allowEscapase=TRUE))

data=read.csv("https://github.com/Derek-Jones/ESEUR-code-data/blob/master/benchmark/MSTR10-DIMM.csv.xz")
-----

[source,R]
-----
height,width,date
2.1,3.6,10-9-2011
4.2,8.5,11-9-2011
-----

Plotting
--------

{nbsp}

<rcode>plot()</rcode> - built in

<rcode>ggplot()</rcode> - popular add-on package <rcode>ggplot2</rcode>

[source,R]
-----
plot(xvals, yvals)
plot(yvals) # plot(1:length(yvals), yvals)

plot(xvals, yvals, log="y")
plot(xvals, yvals, xlim=c(1, 10))
plot(xvals, yvals, xlab="This is X", ylab="Y here")

plot(xvals, yvals, pch="+", col="pink")
points(more_x, more_y, col="green")
lines(x_lines, y_lines, col="blue")
-----

Built-in functions
------------------

{nbsp}

<rcode>nrow(df)</rcode>, <rcode>ncol(df)</rcode>, <rcode>length(vec)</rcode>,
<rcode>nchar(vec)</rcode>, ...

{nbsp}

<rcode>summary(model)</rcode>, <rcode>sum(vec)</rcode>, <rcode>mean(vec)</rcode>,
<rcode>max(vec)</rcode>, <rcode>min(vec)</rcode>, ...

{nbsp}

<rcode>diff(vec)</rcode>, <rcode>grep(pat, df\$name)</rcode>, <rcode>order(vec)</rcode>,
<rcode>sort(vec)</rcode>, ...

{nbsp}

<rcode>log(vec)</rcode>, <rcode>sin(vals)</rcode>,
<rcode>runif(100)</rcode>, <rcode>rnorm(200, mean=2)</rcode>,

<rcode>glm(y ~ x, data=df)</rcode>, <rcode>predict(model)</rcode>, ...

Useful functions for debugging
------------------------------

{nbsp}

<rcode>str(df)</rcode>

{nbsp}

<rcode>ls()</rcode>, <rcode>rm(x)</rcode>

{nbsp}

<rcode>head(df, n=6)</rcode>, <rcode>tail(df, n=6)</rcode>

{nbsp}

<rcode>table(df\$x)</rcode>

Structure of SE programs in R
-----------------------------

{nbsp}

[source,R]
-----
# R programs tend to be short

orig_data=read_data()

interesting_data=reshape_data(orig_data)

stat_results=appropriate_statistics(interesting_data)

plot_result(stat_results)
-----

Data analysis process
---------------------

{nbsp}

Clean data

* most time spent here

Specify behavior expected - hypothesis

* knowledge of the subject
* suggested by the data you have (data dredging, post-hoc analysis, fishing)

Find expected patterns

* fit regression model
* survival analysis
* time series

Communicate the results

Patterns in data
----------------

{nbsp}

Based on domain knowledge

* expectations of behavior
* hunches
* unexplained behavior experienced

{nbsp}

Known, commonly occurring patterns

* linear relationship
* distributions: exponential, power law, gaussian, random

Exploration techniques
----------------------

{nbsp}

Plot data - visual patterns

{nbsp}

Suck it and see model building

* foolish
* data dredging, post-hoc analysis, fishing

Data patterns
-------------

.Plots of sample values having various patterns.
image::intro-1-data-plot.jpg[]


rexample("examples/data-patterns.R")

Visualization options
---------------------

Paired relationships

* <rcode>plot</rcode>, <rcode>pairs</rcode>

Plotting trend line

* <rcode>loess</rcode>

Density plots

* Computer age histograms

3-D

* heatmaps
* contour plots

Plotting column pairs
---------------------

-----
Name,CFP,Haskell,Abstract,C
seL4_IRQHandler_Ack,6,26,17,68
seL4_TCB_Resume,6,1671,503,1681
seL4_TCB_Suspend,6,1611,479,1607
seL4_ARM_Page_FlushCaches,6,413,211,398
seL4_IRQHandler_Clear,7,1555,381,1609
seL4_TCB_SetPriority,7,219,187,121
-----

Visualise paired relationships

[source,R]
-----
plot( ~ CFP+Haskell+Abstract+C, data=work, col=point_col,
                                            cex.labels=2.0)
-----

Three way pairs
---------------

.Various measurements of work performed implementing the same functionality, number of lines of Haskell and C implementing functionality, CFP (COSMIC function points; based on user manual) and length of formal specification.
image::intro-1-pub-fs-fp.jpg[]


rexample[examples/pub-fs-fp.R]

Ada vs. Fortran
---------------

.Effort, in hours (log scale), spent in various development phases of projects written in Ada (blue) and Fortran (red).
image::intro-1-nasa-ada-fortran.jpg[]


[source,R]
-----
panel.language=function(x, y, language)
{ ... }

pairs(log(nasa[-c(28, 30) , 16:19]), panel = panel.language, language=nasa\$language)
-----

rexample[examples/nasa-ada-fortran.R]

Trend line
----------

{nbsp}

Values do not always exhibit a discernible direction

{nbsp}

Averaging line through points

* running mean, splines, loess (LOcal regrESSion)
[source,R]
-----
lines(loess.smooth(x_vals, y_vals, span=0.3),
                                     col="blue")

loess_mod=loess(y_axis ~ x_axis, span=0.3)
loess_pred=predict(loess_mod)
lines(x_axis, loess_pred, col="blue")
-----

NASA effort/cost pattern
------------------------

.Effort invested in project definition (as percentage of original estimate) against cost overrun (as percentage of original estimate).
image::intro-1-NASA_gruhl.jpg[]


rexample[examples/NASA_gruhl.R]

////////////////
Don't have to be half-way point
-------------------------------

# .Year and age at which survey respondents started contributing to FLOSS, i.e., made their first FLOSS contribution.
# <<echo=FALSE,results=hide,label=msr14-floss-survey,fig=TRUE,align="center">>=
# source("../examples/msr14-floss-survey.R")
# @

rexample[examples/msr14-floss-survey.R]
////////////////

Density of points
-----------------

.Number of files and lines of code in 3,782 projects on Sourceforge.
image::intro-1-herraiz-projects.jpg[]


rexample[examples/herraiz-projects.R]

Boxplots
--------

.Boxplot of time between a bug in Eclipse being reported and the first response to the report; right plot is notched.
image::intro-1-boxplot-10-cscw.jpg[]


rexample[examples/boxplot-10-cscw.R]

3-Dimensions
------------

{nbsp}

x-y axis only supports two variable visual displays

{nbsp}

Want to visually display information about three variables

Heatmaps
--------

.Intel Sandy Bridge L3 cache bandwidth in GB/s at various clock frequencies and using combinations of cores (0-3 denotes cores zero-through-three, 0,2,4 denotes the three cores zero, two and four).
image::intro-1-heatmap-hotpower.jpg[]


rexample[examples/heatmap-hotpower.R]

Contour plots
-------------

.Contour plot of the number of sessions executed on a computer having a given processor speed and memory capacity.
image::intro-1-thereska_sipew-procspeed-memsize.jpg[]


rexample[examples/thereska_sipew-procspeed-memsize.R]

Books
-----

Dead trees

* The R book by M. Crawley
* R in Action by R. Kabacoff
* Applied Linear Statistical Models by Kutner, Nachtsheim, Neter, Li
* Introduction to Probability Models by S. Ross, mathematical

{nbsp}

Online pdfs

* From Algorithms to Z-Scores: Probabilistic and Statistical Modelling in Computer Science by N. Matloff 
* Grinstead and Snell’s Introduction to Probability by Grinstead and Snell
* R for Programmers by N. Matloff
* icebreakeR by A. Robinson

Data to try
-----------

--------
C source measurements: c_linelen.csv.xz

C source measurements: c_linetok.csv.xz

cpu sales: turley_02.csv.xz

debian-src-stats.csv.xz
--------

