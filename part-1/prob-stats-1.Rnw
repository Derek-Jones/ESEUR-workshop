ESEUR Workshop - Probability & Statistics
=========================================
:author:    Derek M. Jones
:copyright: Somebody
:backend:   slidy
:max-width: 45em

Probability vs. Statistics
--------------------------

{nbsp}

Probability makes inferences about individual events based on the
characteristics of the population

* makes use of deductive reasoning

Statistics makes inferences about the population based on the
characteristics of a sample of the population

* makes use of inferential reasoning

<<echo=FALSE,results=hide,label=pop-sample,fig=TRUE,align="center">>=
source("../examples/pop-sample.R")
@

Probability distributions
-------------------------

Mathematical description of the pattern of values obtained by
following a consistent process

* the flipping a coin process
** generates one of two values
** fixed probability of either value
** each value is independent of the previous one

* binomial distribution: count of the number of heads and tails
* negative binomial distribution: number of heads seen before
a specified number of tails are seen

Fit a sample of measurements to a known probability distribution

* infer behavior of underlying process based on what is known about
generating values having that particular distribution

Relationships between distributions
----------------------------------

image::../not_R/disc-cont.jpg[width=800, height=800]

Common SE probability distributions
-----------------------------------

Normal, Gaussian - bell shaped - talked about: Lognormal

Exponential , 25% , <equ>y=a e^{-b*x}</equ> - memoryless, percentage inc/dec

Power law/Pareto , 15% , <equ>y=a x^{-b}</equ>

Poisson , <equ>\frac{\lambda^x e^{-\lambda}}{x!}</equ> - count data

.Axis scales for exponential and power law samples.
<<echo=FALSE,results=hide,label=scaling-exp-pow,fig=TRUE,align="center">>=
source("../examples/scaling-exp-pow.R")
@

rexample[examples/scaling-exp-pow.R]

3n+1 Program length
-------------------

.Number of <code>3n+1</code> programs containing a given number of lines, and four distributions fitted to this data.
<<echo=FALSE,results=hide,label=3np1,fig=TRUE,align="center">>=
source("../examples/3np1.R")
@

rexample[examples/3np1.R]

Cullen and Frey graph
---------------------

[source,R]
----------
library(fitdistrplus)
...
descdist(n3\$lines, discrete=TRUE, boot=1000)
----------

.Cullen and Frey graph for the <equ>3n+1</equ> program LOC.
<<echo=FALSE,results=hide,label=3np1-dist,fig=TRUE,align="center">>=
source("../examples/3np1-dist.R")
@

rexample[examples/3np1-dist.R]

Life can be complicated
-----------------------

.Density plot of MPI micro-benchmark runtime performance for calls to <code>MPI_Scan</code> with 10,000 Bytes (left) and to <code>MPI_Allreduce</code> with 1,000 Bytes (right).
<<echo=FALSE,results=hide,label=mpi_data_fig,fig=TRUE,align="center">>=
source("../examples/mpi_data_fig.R")
@

rexample[examples/mpi_data_fig.R]

Fit multiple distributions
--------------------------

.Mixture model fitted by the rfunc[normalmixEM] function to the performance data from calls to <code>MPI_Allreduce</code>.
<<echo=FALSE,results=hide,label=mpi_data_fit,fig=TRUE,align="center">>=
source("../examples/mpi_data_fit.R")
@

rexample[examples/mpi_data_fit.R]

/////////////////
Measurement scales
------------------

{nbsp}

Measured values have a position on a scale

{nbsp}

Scales come in two basic forms:

* discrete
* continuous

Discrete
--------

* Nominal scale: value has an arbitrary number or name

** no ordering relationship exists between different numbers/names
** not really a scale in the usual sense of the word
** numbers on the back of footballers' shirt or the various sales
regions in which a product is sold

* Ordinal scale: value is a number or name of an item

** an ordering relationship exists between the numbers/names
** distance between distinct values need not be the same
** classifying faults by their severity, e.g., minor, moderate, serious
** address of the members of a structure type increases for successive members

Continuous
----------

* Interval scale: each value is a number

** a relative ordering exists
** a fixed length interval of the scale denotes the same amount of quantity being measured
** a data point of zero does not indicate the absence of what is being measured
** addition and subtraction can be applied to values, but not multiplication or division
** the start date of some event is an interval scale.  If the
start date of events <equ>A</equ>, <equ>B</equ> and <equ>C</equ> are
known, and difference in start date between events <equ>A</equ> and
<equ>B</equ> is the same as between events <equ>C</equ> and
<equ>D</equ>, then it is possible to calculate the start date of
event <equ>D</equ>.

* Ratio scale: each value is a number

** the ordering of items is preserved
** the size of the interval between items
** the ratios between items
** zero denotes the lack of the attribute being measured
** time difference between two events is a ratio scale
/////////////////

Sampling
--------

{nbsp}

Cost/benefit of more measurements

* less uncertainty -> <equ>\frac{1}{\sqrt{N}}</equ>

* may cost more

* may take longer to obtain

{nbsp}

Have to make do with what is available

Small samples are irregular
---------------------------

.Samples of randomly selected values drawn from the same normal distribution (100 points in each plot in left column, 1,000 in right column).
<<echo=FALSE,results=hide,label=two-norm,fig=TRUE,align="center">>=
source("../examples/two-norm.R")
@

rexample[examples/two-norm.R]

Sampling SPEC CPU2006
---------------------

.Mean (red) and standard deviation (grey lines; they are not symmetrical because of the log scaling) of samples of 3 items drawn from a population of 1,000 items (blue line mean, green line standard deviation).
<<echo=FALSE,results=hide,label=sample-3_mean,fig=TRUE,align="center">>=
source("../examples/sample-3_mean.R")
@

rexample[examples/sample-3_mean.R]

Testing small samples
---------------------

.Probability, with 95% confidence, that <rcode>shapiro.test</rcode> correctly reports that samples drawn from various distributions are not drawn from a Normal distribution, and probability of an incorrect report when the sample is drawn from a Normal distribution.
<<echo=FALSE,results=hide,label=SW-check,fig=TRUE,align="center">>=
source("../examples/SW-check.R")
@

rexample[examples/SW-check.R]

Contaminated Normal
-------------------

.A contaminated normal, values drawn from two normal distributions with 10% of values drawn from a distribution having a standard deviation five times greater than the other.
<<echo=FALSE,results=hide,label=contam-norm,fig=TRUE,align="center">>=
source("../examples/contam-norm.R")
@

rexample[examples/contam-norm.R]

Impact of population mean/sd
----------------------------

.Impact of differences in <rcode>mean</rcode>/<rcode>sd</rcode> on overlap between two populations ($\alpha$ probability of false positive; $\beta$ probability of false negative).
<<echo=FALSE,results=hide,label=power-trade-off,fig=TRUE,align="center">>=
source("../examples/power-trade-off.R")
@

rexample[examples/power-trade-off.R]

Statistical error
-----------------

.The four combinations of circumstances, and their outcomes in hypothesis testing.
[label="null-hypoth-table", width="65%", cols="<2s,<2d,2*<3d"]
[options="header", frame="none", grid="none", align="center"]
|===============================
|          | 2+^s| Decision made
|          |                   | Reject <equ>H</equ> | Fail to reject <equ>H</equ>
.2+.^s| Actual |<equ>H</equ> true  | Type I error | Correct
              |<equ>H</equ> false | Correct      | Type II error
|===============================

.Stop/do-more testing decision, and outcomes based on who incurs loss
[label="test-hypoth-table", width="75%", cols="<2s,<2d,2*<3d"]
[options="header", frame="none", grid="none", align="center"]
|===============================
|          | 2+^s| Decision made
|          |                   | Stop testing | Do more testing
.2+.^s| Actual |More testing needed  .^| Customer loss .^| OK
              |Testing is sufficient .^| OK            .^| Vendor loss
|===============================

Experimental options
--------------------

<rcode>pwr.2p.test()</rcode>, from package <rcode>pwr</rcode>

.The four related quantities in experimental design power analysis.
<<echo=FALSE,results=hide,label=design-power,fig=TRUE,align="center">>=
source("../examples/design-power.R")
@

rexample[examples/design-power.R]

Statistically significant
-------------------------

{nbsp}

A test statistic is said to be <phrase>statistically
significant</phrase> when it allows the null hypothesis to be rejected

{nbsp}

<phrase>statistically significant</phrase> is often shortened to just <phrase>significant</phrase>

* common usage meaning very different from statistical one

{nbsp}

A risk based approach, balancing costs and benefits

* 1 in <equ>20</equ> , <equ>5</equ>% , <equ>2 \sigma</equ> , psychology experiments
* 1 in <equ>770</equ> , <equ>0.13</equ>% , <equ>3 \sigma</equ>
* 1 in <equ>3.3\times10^6</equ> , <equ>3\times10^{-7}</equ>% , <equ>5 \sigma</equ> , particle physics
* 1 in <equ>10^9</equ> , <equ>10^{-9}</equ>% , <equ>6 \sigma</equ> , genetics

Bonferroni Correction
---------------------

Correct for multiple, <equ>m</equ>, tests

* <equ>1-(1-\alpha)^{\frac{1}{m}} \approx \frac{\alpha}{m}</equ>
* <equ>\alpha=0.05 \rightarrow \frac{0.05}{m}</equ>

Null hypothesis
---------------

Black box function

[source,C]
----------
void null_hypothesis_test(void *result_data, float p_value)
{
// H set by reality, only accessible by running experiment
if ((probability_of_seeing_data_when_H_true(result_data)
                                            < p_value) ||
     !H)
   printf("Willing to assume that H is false\n");
else
   printf("H might be true\n");
}

null_hypothesis_test(run_experiment(), 0.05);
----------

Effect size
-----------

.Examples of the impact of population prevalence, statistical power and p-value on number of false positives and false negatives.
<<echo=FALSE,results=hide,label=true-false-tree,fig=TRUE,align="center">>=
source("../examples/true-false-tree.R")
@

rexample[examples/true-false-tree.R]

Comparing two samples
---------------------

.Number of reflection benchmark results achieving a given score, reported for GTX 970 cards from three third-party manufacturers.
<<echo=FALSE,results=hide,label=UserBenchmark_Nvidia,fig=TRUE,align="center">>=
source("../examples/UserBenchmark_Nvidia.R")
@

rexample[examples/UserBenchmark_Nvidia.R]

The bootstrap
-------------

Very general technique

* no dependence on the sample distribution
* any comparison that can be coded
* only practical when using a computer

Bootstrap algorithm

* assume no difference between the two samples, i.e., items exchangeable
* create new samples from aggregate of existing two samples
* the <phrase>empirical distribution</phrase>

. combine both samples into an aggregate sample
. randomly sample this aggregate, to create two new samples, <equ>s_1</equ>, <equ>s_2</equ>
. compare <equ>s_1</equ> and <equ>s_2</equ>, save the result, <equ>result_i</equ>
. repeat steps 2-3 many times, say 5,000
. compare the original two samples, producing <equ>result_{orig}</equ>
. order the <equ>result_i</equ>: what percentage are more/less than <equ>result_{orig}</equ>

Bootstrap example
-----------------

[source,R]
----------
library("boot")

mean_diff=function(res, indices)
{
t=res[indices]
return(mean(t[1:num_MSI])-mean(t[(num_MSI+1):total_reps]))
}

# MSI_refl   # sample s1
# Giga_refl  # sample s2

num_MSI=length(MSI_refl)    # Length of sample s1
num_Giga=length(Giga_refl)  # Length of sample s2
total_reps=num_MSI+num_Giga # Length of Aggregate sample

GTX_boot=boot(c(MSI_refl, Giga_refl), mean_diff, R = 4999)

refl_mean_diff=mean(MSI_refl)-mean(Giga_refl) # Diff sample means
# Two-sided test
E=length(which(abs(GTX_boot\$t) >= abs(refl_mean_diff)))
# likelihood= (E+1)/(4999+1)
----------

Data to try
-----------

UserBenchmark_Nvidia-GTX-970.htm.xz

Planning poker: 16_1.csv.xz, 16_2.csv.xz 

Typos in serif and sans-serif text: tb104veytsman-typo_data.csv.xz

